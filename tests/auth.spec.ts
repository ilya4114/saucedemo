import { test, expect } from '@playwright/test';
import { LoginPage } from '../pages/LoginPage';

const accounts = [
  { username: 'standard_user', password: 'secret_sauce', expectError: false },
  { username: 'locked_out_user', password: 'secret_sauce', expectError: true },
  { username: 'problem_user', password: 'secret_sauce', expectError: false },
  { username: 'performance_glitch_user', password: 'secret_sauce', expectError: false },
  { username: 'error_user', password: 'secret_sauce', expectError: false },
  { username: 'visual_user', password: 'secret_sauce', expectError: false },
];

test.describe('üß™ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ saucedemo.com', () => {
  test.beforeEach(async ({ page }) => {
    await page.goto('https://www.saucedemo.com/');
  });

  for (const account of accounts) {
    test(`–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: ${account.username}`, async ({ page }) => {
      const loginPage = new LoginPage(page);

      await loginPage.login(account.username, account.password);

      if (account.expectError) {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        await loginPage.checkErrorMessage('Sorry');
      } else {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        await expect(page).toHaveURL(/inventory/);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –µ—Å—Ç—å —Ç–æ–≤–∞—Ä—ã
        const items = await page.locator('.inventory_item').count();
        expect(items).toBeGreaterThan(0);
      }
    });
  }
});
